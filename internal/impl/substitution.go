package impl

import (
	"github.com/slarkdarr/Tugas-2-Kriptografi/internal"
)

type (
	substitution struct {
		box [256]byte
	}
)

func NewSubstitution() internal.Substitution {
	return &substitution{
		box: [256]byte{
			0x8a, 0x2e, 0xe9, 0x58, 0xb1, 0xd1, 0x75, 0x63,
			0x52, 0x6d, 0x41, 0xc, 0xa6, 0x7a, 0x4c, 0x7c,
			0x5c, 0xae, 0x7f, 0x23, 0x59, 0xf0, 0xba, 0xb7,
			0x30, 0x28, 0x50, 0x21, 0x9d, 0x90, 0x4a, 0xbb,
			0xf7, 0x2d, 0x2, 0x3e, 0xf9, 0x8e, 0xd9, 0x9f,
			0x47, 0x38, 0xd0, 0xe3, 0x49, 0x98, 0x64, 0x69,
			0x60, 0xb9, 0xd4, 0x80, 0x1f, 0x7d, 0xf8, 0x62,
			0xf5, 0x15, 0xda, 0xc9, 0x8b, 0x87, 0xf1, 0xf6,
			0x54, 0x8d, 0xc8, 0xb6, 0xdf, 0x4b, 0xad, 0x71,
			0xbe, 0xab, 0x4f, 0x6e, 0xc3, 0x56, 0x77, 0xe,
			0x73, 0xff, 0xc0, 0x72, 0x85, 0x91, 0x2a, 0x6,
			0x6f, 0xde, 0x8, 0x79, 0xdc, 0xa0, 0x22, 0x74,
			0x97, 0x5a, 0x8c, 0x61, 0x37, 0x1a, 0xf, 0x25,
			0x6a, 0xee, 0x89, 0xfe, 0x53, 0x96, 0x48, 0xdb,
			0x20, 0x9, 0x4, 0x8f, 0x2b, 0xb2, 0x92, 0xe0,
			0x33, 0x9a, 0x19, 0xc1, 0xbf, 0xdd, 0xa1, 0x99,
			0x55, 0xec, 0xe7, 0xef, 0xb5, 0x51, 0x76, 0x31,
			0xaf, 0x81, 0x4e, 0x3a, 0xcc, 0xd3, 0xc4, 0x9b,
			0xd5, 0xe2, 0x3, 0x12, 0xb, 0x3c, 0xac, 0xd8,
			0x57, 0x29, 0x1, 0x94, 0x11, 0xd, 0xb3, 0x5f,
			0xf4, 0x32, 0x3f, 0x1b, 0x9e, 0xeb, 0x7b, 0x18,
			0x1e, 0x68, 0xaa, 0x39, 0xd2, 0xea, 0x14, 0x86,
			0xcb, 0x35, 0x27, 0x6b, 0xfa, 0xca, 0xc5, 0xa9,
			0x2c, 0xc2, 0x84, 0x16, 0x46, 0xe5, 0xa5, 0xa2,
			0xa, 0xb4, 0x3b, 0x5d, 0xa7, 0x3d, 0x9c, 0x43,
			0xcf, 0xc7, 0x13, 0x82, 0x6c, 0xa4, 0xc6, 0x40,
			0xcd, 0xd7, 0xb0, 0x5e, 0x0, 0x95, 0xed, 0x4d,
			0xd6, 0x65, 0xa3, 0x66, 0x83, 0x10, 0x93, 0xf2,
			0x70, 0xce, 0x34, 0x24, 0xa8, 0x42, 0xe1, 0xfb,
			0x67, 0x88, 0x5b, 0x17, 0xbd, 0x1c, 0xbc, 0xe4,
			0xe6, 0x7e, 0xf3, 0x5, 0x1d, 0xb8, 0x2f, 0x44,
			0xfd, 0x45, 0xfc, 0x36, 0xe8, 0x26, 0x78, 0x7},
	}
}

func (s *substitution) Execute(chunk []byte, encrypt bool) []byte {
	validatedChunk := s.validate(chunk)
	if !encrypt {
		return s.reverse(validatedChunk)
	}
	return s.forward(validatedChunk)
}

func (s *substitution) validate(chunk []byte) []byte {
	result := make([]byte, 4)
	for i := 0; i < 4; i++ {
		if i+1 > len(chunk) {
			result[i] = 0
		} else {
			result[i] = chunk[i]
		}
	}
	return result
}

func (s *substitution) forward(chunk []byte) []byte {
	output := make([]byte, 4)
	for i, b := range chunk {
		output[i] = s.box[b]
	}
	return output
}

func (s *substitution) reverse(chunk []byte) []byte {
	output := make([]byte, 4)
	for i, b := range chunk {
		for j, value := range s.box {
			if value == b {
				output[i] = byte(j)
				break
			}
		}
	}
	return output[0:4]
}
